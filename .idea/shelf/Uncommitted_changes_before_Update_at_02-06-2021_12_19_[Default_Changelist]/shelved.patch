Index: app/src/main/java/com/bpmlinks/vbank/ui/vehicleinspection/VehicleInspectionFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bpmlinks.vbank.ui.vehicleinspection\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.app.Notification\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.app.PendingIntent\r\nimport android.content.*\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Bitmap\r\nimport android.graphics.Color\r\nimport android.location.LocationManager\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.provider.Settings\r\nimport android.text.Html\r\nimport android.util.DisplayMetrics\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.webkit.WebView\r\nimport android.webkit.WebViewClient\r\nimport android.widget.FrameLayout\r\nimport android.widget.RemoteViews\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.widget.AppCompatButton\r\nimport androidx.appcompat.widget.AppCompatTextView\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.app.NotificationCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.FragmentTransaction\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager\r\nimport androidx.navigation.fragment.navArgs\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout\r\nimport com.bpmlinks.vbank.BR\r\nimport com.bpmlinks.vbank.R\r\nimport com.bpmlinks.vbank.base.BaseFragment\r\nimport com.bpmlinks.vbank.databinding.VehicleInspectionFragmentBinding\r\nimport com.bpmlinks.vbank.fcm.FirebaseNotification\r\nimport com.bpmlinks.vbank.fcm.receiver.NotificationReceiver\r\nimport com.bpmlinks.vbank.helper.AppConstants\r\nimport com.bpmlinks.vbank.helper.viewmodel.LocalStorage\r\nimport com.bpmlinks.vbank.twilio.CallActivity\r\nimport com.bpmlinks.vbank.twilio.LocationViewModel\r\nimport com.bpmlinks.vbank.twilio.VideoActivity\r\nimport com.bpmlinks.vbank.ui.HomeActivity\r\nimport com.bpmlinks.vbank.ui.thankyou.ThankYouActivity\r\nimport com.bpmlinks.vbank.ui.videorecordpermission.VdRecordPermissionActivity\r\nimport com.google.gson.Gson\r\nimport com.vbank.vidyovideoview.connector.MeetingParams\r\nimport com.vbank.vidyovideoview.helper.AppConstant\r\nimport com.vbank.vidyovideoview.helper.BundleKeys\r\nimport com.vbank.vidyovideoview.model.DocuSignStatusRequest\r\nimport com.vbank.vidyovideoview.model.LocationLatLan\r\nimport com.vbank.vidyovideoview.model.Output\r\nimport com.vbank.vidyovideoview.webservices.ApiCall\r\nimport dagger.android.support.AndroidSupportInjection\r\nimport kotlinx.android.synthetic.main.vehicle_inspection_fragment.*\r\nimport okhttp3.ResponseBody\r\nimport retrofit2.Call\r\nimport retrofit2.Response\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport javax.inject.Inject\r\n\r\n\r\nclass VehicleInspectionFragment : BaseFragment<VehicleInspectionFragmentBinding, VehicleInspectionViewModel>() {\r\n    var TAG = VehicleInspectionFragment::class.java.name\r\n    @Inject\r\n    lateinit var factory: ViewModelProvider.Factory\r\n\r\n    private val navArgs by navArgs<VehicleInspectionFragmentArgs>()\r\n    private var meetingParams : MeetingParams? = MeetingParams()\r\n    lateinit var recever :BroadcastReceiver\r\n    var notificationid=0\r\n    var isGpsEnabled = false\r\n    var checkGpsEnabled = false\r\n    lateinit var locationManager:LocationManager\r\n    lateinit var dialogBuilder : AlertDialog.Builder\r\n    lateinit var alert: AlertDialog\r\n    var LOCATION_PERMISSION_REQUEST_CODE = 1\r\n    private var webView: WebView? = null\r\n\r\n    private lateinit var locationViewModel: LocationViewModel\r\n\r\n    override fun getViewModel()= ViewModelProvider(this, factory).get(VehicleInspectionViewModel::class.java)\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        requireActivity().window.statusBarColor = ContextCompat.getColor(\r\n            requireContext(),\r\n            R.color.white\r\n        )\r\n//        getViewModel()?.scheduledTime.value = navArgs.sheduledTime\r\n        locationManager = activity?.getSystemService(Context.LOCATION_SERVICE) as LocationManager\r\n        locationPermission()\r\n        init()\r\n\r\n\r\n\r\nLog.d(TAG, \"enter the call\")\r\n        recever  = object :BroadcastReceiver(){\r\n            override fun onReceive(context: Context?, intent: Intent?) {\r\n                Log.d(TAG, \"enter the call 1\")\r\n                if (intent != null) {\r\n                    meetingParams = if (intent.hasExtra(BundleKeys.MeetingParams)) {\r\n                        intent.getParcelableExtra(BundleKeys.MeetingParams) as MeetingParams\r\n                    }else{\r\n                        MeetingParams()\r\n                    }\r\n\r\n                    if(!meetingParams?.token.isNullOrEmpty())\r\n                    {\r\n                        Log.d(\"onresume\", \"call in trigger\")\r\n                        iv_join_disable.visibility=View.GONE\r\n                        btn_join_disable.visibility=View.GONE\r\n\r\n                        iv_join.visibility=View.VISIBLE\r\n                        btn_join.visibility=View.VISIBLE\r\n                    }\r\n                    else\r\n                    {\r\n                        iv_join_disable.visibility=View.VISIBLE\r\n                        btn_join_disable.visibility=View.VISIBLE\r\n\r\n                        iv_join.visibility=View.GONE\r\n                        btn_join.visibility=View.GONE\r\n                    }\r\n\r\n                    if (intent.hasExtra(BundleKeys.callDecline))\r\n                    {\r\n                        Log.d(\"onresume\", \"call in BundleKeys.callDecline if loop\")\r\n                        var callend= intent.getStringExtra(BundleKeys.callDecline)\r\n                        if(callend.equals(\"yes\", true))\r\n                        {\r\n                            iv_join_disable.visibility=View.VISIBLE\r\n                            btn_join_disable.visibility=View.VISIBLE\r\n\r\n                            iv_join.visibility=View.GONE\r\n                            btn_join.visibility=View.GONE\r\n                        }\r\n\r\n                    }\r\n\r\n                    if(intent.hasExtra(AppConstants.NOTIFICATION_ID))\r\n                    {\r\n                        notificationid= intent.getIntExtra(AppConstants.NOTIFICATION_ID, 0)\r\n                    }\r\n\r\n\r\n                    if (intent?.action.toString().equals(\"DOCUSIGN_ACTION\")){\r\n                        Log.d(TAG, \"webview onReceive: if loop \")\r\n                        var url=   intent?.getStringExtra(BundleKeys.docusignurl)\r\n                        if (!url.isNullOrEmpty()) {\r\n                            webView?.visibility = View.VISIBLE\r\n                            btn_join_disable.visibility = View.GONE\r\n                            iv_join_disable.visibility = View.GONE\r\n\r\n                            loadWebview(url)\r\n                        } else {\r\n                            //      thumbnailVideoView.visibility=View.GONE\r\n                            webView?.visibility = View.GONE\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n//      \r\n\r\n        Log.d(\"TAG\", \"callend onresume received callkeyNb: ${meetingParams?.callKeyNb}  \")\r\n        var swipeRefreshLayout:SwipeRefreshLayout?=requireActivity().findViewById(R.id.swipt_refresh)\r\n        swipeRefreshLayout?.setOnRefreshListener(SwipeRefreshLayout.OnRefreshListener {\r\n            swipeRefreshLayout.isRefreshing = false\r\n            dateTimeApiCall()\r\n            Toast.makeText(context, \"Date and time is Updated \", Toast.LENGTH_SHORT).show()\r\n        })\r\n        dateTimeApiCall()\r\n           Log.d(\"onresume\", \"call in resume\")\r\n\r\n           var  intentfilter =IntentFilter(getString(R.string.brodcost_recever))\r\n           context?.let { LocalBroadcastManager.getInstance(it).registerReceiver(\r\n               recever,\r\n               intentfilter\r\n           ) }\r\n\r\n           var  callintentfilter =IntentFilter(getString(R.string.callend_brodcost_recever))\r\n           context?.let { LocalBroadcastManager.getInstance(it).registerReceiver(\r\n               recever,\r\n               callintentfilter\r\n           ) }\r\n\r\n           var intentfilter1 = IntentFilter(getString(R.string.docusign_brodcost_recever))\r\n           context?.let { LocalBroadcastManager.getInstance(it).registerReceiver(\r\n               recever,\r\n               intentfilter1\r\n           ) }\r\n\r\n           if (checkGpsEnabled){\r\n               isGpsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)\r\n\r\n           }\r\n           if (isGpsEnabled) {\r\n               if ((ContextCompat.checkSelfPermission(\r\n                       requireActivity(),\r\n                       Manifest.permission.ACCESS_FINE_LOCATION\r\n                   )\r\n                           == PackageManager.PERMISSION_GRANTED)) {\r\n\r\n//                requestLocationUpdates1()\r\n                   Log.d(\"msg\", \"onresume if loop\")\r\n               }\r\n\r\n           }else{\r\n\r\n               if ((ContextCompat.checkSelfPermission(\r\n                       requireActivity(),\r\n                       Manifest.permission.ACCESS_FINE_LOCATION\r\n                   )\r\n                           == PackageManager.PERMISSION_GRANTED)) {\r\n\r\n                   if (alertMessageLocation()) {\r\n                       Log.d(TAG, \"http location inside alart block requestLocationUpdates one \")\r\n                       requestLocationUpdates()\r\n                   }\r\n                   Log.d(\"msg\", \"onresume if loop\")\r\n               }\r\n\r\n\r\n\r\n           }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        context?.let { LocalBroadcastManager.getInstance(it).unregisterReceiver(recever) }\r\n    }\r\n\r\n    override fun onAttach(context: Context) {\r\n        AndroidSupportInjection.inject(this)\r\n        super.onAttach(context)\r\n    }\r\n\r\n\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n    }\r\n\r\n    @SuppressLint(\"UseRequireInsteadOfGet\")\r\n    private fun init()\r\n    {\r\n        if (edit_time.text.isNullOrEmpty()&& date.text.isNullOrEmpty()){\r\n            showProgress()\r\n        }else{\r\n            hideProgress()\r\n        }\r\n\r\n        Log.d(\"onCreate\", \"calll in create call\")\r\n        webView = view?.findViewById(R.id.webView_inspection)\r\n        webView?.settings?.javaScriptEnabled = true\r\n        webView?.settings?.loadWithOverviewMode = true\r\n        webView?.settings?.useWideViewPort = true\r\n        webView?.settings?.domStorageEnabled = true\r\n\r\n\r\n        btn_join.setOnClickListener {\r\n\r\n            var intent=Intent(context, VdRecordPermissionActivity::class.java)\r\n            intent.putExtra(BundleKeys.MeetingParams, meetingParams)\r\n            intent.putExtra(AppConstants.NOTIFICATION_ID, notificationid)\r\n            startActivity(intent)\r\n            activity?.finish()\r\n\r\n            iv_join_disable.visibility=View.GONE\r\n            btn_join_disable.visibility=View.GONE\r\n            iv_join.visibility=View.GONE\r\n            btn_join.visibility=View.GONE\r\n            btn_exit.visibility=View.VISIBLE\r\n\r\n\r\n\r\n        }\r\n\r\n        btn_exit.setOnClickListener {\r\n            val intent = Intent(context, HomeActivity::class.java)\r\n            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n            intent.putExtra(com.bpmlinks.vbank.helper.BundleKeys.MOVE_TO_USER_INPUT_SCREEN, true)\r\n            startActivity(intent)\r\n            activity?.finish()\r\n        }\r\n\r\n        logout.setOnClickListener{\r\n            startActivity(Intent(context, HomeActivity::class.java))\r\n            val sharedPreferences = activity?.getSharedPreferences(\"MyUser\", Context.MODE_PRIVATE)\r\n            val editor = sharedPreferences?.edit()\r\n            editor?.clear()\r\n            editor?.apply()\r\n            activity?.finish()\r\n\r\n        }\r\n        lougout_icon.setOnClickListener{\r\n            startActivity(Intent(context, HomeActivity::class.java))\r\n            val sharedPreferences = activity?.getSharedPreferences(\"MyUser\", Context.MODE_PRIVATE)\r\n            val editor = sharedPreferences?.edit()\r\n            editor?.clear()\r\n            editor?.apply()\r\n            activity?.finish()\r\n\r\n        }\r\n        notification_btn.setOnClickListener {\r\n            notification()\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    override fun getBindingVariable()=BR.vehicleInspectionVM\r\n\r\n    override fun getContentView()=R.layout.vehicle_inspection_fragment\r\n\r\n    override fun internetConnected() {\r\n\r\n    }\r\n\r\n    fun notification()\r\n    {\r\n        val notificationId = 1\r\n\r\n        var   intent= Intent(context, VideoActivity::class.java)\r\n\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        intent.putExtra(AppConstants.NOTIFICATION_ID, notificationId)\r\n        val meetingParams = MeetingParams()\r\n        meetingParams.roomName=\"tesss\"\r\n        meetingParams.token=\"ascdbsbcdvbsndbvnsdvnb\"\r\n        meetingParams.docusignurl=\"\"\r\n\r\n        intent.putExtra(BundleKeys.MeetingParams, meetingParams)\r\n        val pendingIntent = PendingIntent.getActivity(\r\n            context,\r\n            0,\r\n            intent,\r\n            PendingIntent.FLAG_UPDATE_CURRENT\r\n        )\r\n\r\n        val fullScreenIntent = Intent(context, CallActivity::class.java)\r\n        fullScreenIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)\r\n        fullScreenIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        fullScreenIntent.putExtra(AppConstants.NOTIFICATION_ID, notificationId)\r\n        fullScreenIntent.putExtra(BundleKeys.MeetingParams, meetingParams)\r\n        val fullScreenPendingIntent = PendingIntent.getActivity(\r\n            context,\r\n            0,\r\n            fullScreenIntent,\r\n            PendingIntent.FLAG_UPDATE_CURRENT\r\n        )\r\n\r\n        val buttonIntent = Intent(context, NotificationReceiver::class.java)\r\n        buttonIntent.putExtra(AppConstants.NOTIFICATION_ID, notificationId)\r\n        buttonIntent.putExtra(AppConstants.NOTIFICATION_CUSTOMER_KEY, meetingParams.customerKeyNb)\r\n        buttonIntent.putExtra(AppConstants.NOTIFICATION_CALL_KEY, meetingParams.callKeyNb)\r\n\r\n\r\n\r\n        val dismissIntent =\r\n                PendingIntent.getBroadcast(context, 0, buttonIntent, 0)\r\n\r\n        val channelId = getString(R.string.app_name)\r\n\r\n\r\n        val builder: NotificationCompat.Builder? =\r\n                context?.let { NotificationCompat.Builder(it, channelId) }\r\n\r\n        val notificationLayout = RemoteViews(context?.packageName, R.layout.custome_notification)\r\n\r\n        notificationLayout.setOnClickPendingIntent(R.id.action_btn, pendingIntent)\r\n        notificationLayout.setTextViewText(R.id.custome_notification_title, \"title\")\r\n\r\n        if(!meetingParams.docusignurl.isNullOrEmpty()) {\r\n\r\n\r\n            builder ?.setSmallIcon(R.mipmap.ic_launcher)\r\n                    ?.setContentTitle(\"title\")\r\n                    ?.setContentText(\"bankerName\")\r\n                    ?.setAutoCancel(false)\r\n                    ?.setOngoing(true)\r\n                    ?.addAction(\r\n                        0,\r\n                        getString(R.string.btn_accept_action),\r\n                        pendingIntent\r\n                    )\r\n\r\n\r\n        }\r\n        else {\r\n            builder?.setSmallIcon(R.mipmap.ic_launcher)\r\n                    ?.setContentTitle(\"title\")\r\n                    ?.setContentText(\"bankerName\")\r\n                    ?.setFullScreenIntent(fullScreenPendingIntent, true)\r\n                    ?.setCategory(Notification.CATEGORY_CALL)\r\n                    ?.setAutoCancel(false)\r\n                    ?.setOngoing(true)\r\n                    ?.addAction(\r\n                        R.drawable.ic_call_end_24dp,\r\n                        getString(R.string.btn_reject_incoming_call),\r\n                        dismissIntent\r\n                    )\r\n                    ?.addAction(\r\n                        R.drawable.ic_call_24dp,\r\n                        getString(R.string.btn_accept_incoming_call),\r\n                        pendingIntent\r\n                    )\r\n        }\r\n\r\n\r\n        val notificationManager = context?.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n\r\n        // Since android Oreo notification channel is needed.\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            val channel = NotificationChannel(\r\n                channelId,\r\n                getString(R.string.app_name),\r\n                NotificationManager.IMPORTANCE_HIGH\r\n            )\r\n\r\n\r\n            channel.lightColor = Color.GREEN\r\n            channel.lockscreenVisibility = Notification.VISIBILITY_PRIVATE\r\n            notificationManager.createNotificationChannel(channel)\r\n        }\r\n\r\n        val notification = builder?.build()\r\n        notification?.flags = Notification.FLAG_INSISTENT\r\n\r\n        notificationManager.notify(notificationId, notification)\r\n\r\n        if (meetingParams.docusignurl.isNullOrEmpty())\r\n        {\r\n            var brodcostintent=Intent(getString(R.string.brodcost_recever))\r\n            brodcostintent.putExtra(BundleKeys.MeetingParams, meetingParams)\r\n            brodcostintent.putExtra(AppConstants.NOTIFICATION_ID, notificationId)\r\n            activity?.let { LocalBroadcastManager.getInstance(it).sendBroadcast(brodcostintent) }\r\n        }\r\n        else\r\n        {\r\n            var brodcostintent=Intent(getString(R.string.docusign_brodcost_recever))\r\n            brodcostintent.putExtra(BundleKeys.docusignurl, meetingParams.docusignurl)\r\n            brodcostintent.putExtra(AppConstants.NOTIFICATION_ID, notificationId)\r\n            activity?.let { LocalBroadcastManager.getInstance(it).sendBroadcast(brodcostintent) }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private fun showProgress() {\r\n        progress_bar1.visibility = View.VISIBLE\r\n    }\r\n\r\n    private fun hideProgress() {\r\n        progress_bar1.visibility = View.GONE\r\n    }\r\n\r\n\r\n    fun locationPermission(){\r\n        if ((ContextCompat.checkSelfPermission(\r\n                requireActivity(),\r\n                Manifest.permission.ACCESS_FINE_LOCATION\r\n            )\r\n                        == PackageManager.PERMISSION_GRANTED )) {\r\n\r\n            Log.d(TAG, \"http location granted block requestLocationUpdates \")\r\n            requestLocationUpdates()\r\n            Log.d(\"msg\", \"if loop\")\r\n        }else{\r\n\r\n            if (ActivityCompat.shouldShowRequestPermissionRationale(\r\n                    requireActivity(),\r\n                    Manifest.permission.ACCESS_FINE_LOCATION\r\n                )){\r\n                denymessage()\r\n                Log.d(\"msg\", \"if rationale loop\")\r\n            }else{\r\n                val permissionRequest = arrayOf(\r\n                    Manifest.permission.ACCESS_FINE_LOCATION,\r\n                    Manifest.permission.ACCESS_COARSE_LOCATION\r\n                )\r\n                requestPermissions(permissionRequest, LOCATION_PERMISSION_REQUEST_CODE)\r\n                Log.d(\"msg\", \"else black\")\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        if (requestCode == LOCATION_PERMISSION_REQUEST_CODE){\r\n            var locationPermissionGranted = true\r\n\r\n            for (grantResult in grantResults) {\r\n                locationPermissionGranted = locationPermissionGranted and\r\n                        (grantResult == PackageManager.PERMISSION_GRANTED)\r\n            }\r\n\r\n            if (locationPermissionGranted) {\r\n                Log.d(\"msg\", \"if black\")\r\n                //alertMessageLocation()\r\n\r\n            } else {\r\n                Log.d(\"msg\", \"else black.............................\")\r\n\r\n\r\n                denymessage()\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    fun alertMessageLocation():Boolean{\r\n        locationManager = activity?.getSystemService(Context.LOCATION_SERVICE) as LocationManager\r\n        isGpsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)\r\n\r\n        if (!isGpsEnabled) {\r\n            dialogBuilder = AlertDialog.Builder(requireActivity())\r\n            dialogBuilder.setMessage(\r\n                Html.fromHtml(\r\n                    \"Allow\\\"LocationAccess\\\"to access your location \" + \"                         \" +\r\n                            \"while you are using the app?\" + \"<br />\" +\r\n                            \"<small>\" + \"&nbsp;&nbsp;&nbsp;&nbsp This app needs access to your location!\" + \"</small>\"\r\n                )\r\n            )\r\n                    .setCancelable(false)\r\n                    .setPositiveButton(\"Allow\", DialogInterface.OnClickListener { dialog, id ->\r\n                        alert.dismiss()\r\n                        Log.d(\"gps yes\", \"gps is checkGPSEnable \")\r\n                        checkGpsEnabled = true\r\n                        requireActivity().startActivity(Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS))\r\n\r\n                    })\r\n                    .setNegativeButton(\r\n                        \"Don't Allow\",\r\n                        DialogInterface.OnClickListener { dialog, id ->\r\n                            alert.dismiss()\r\n                            gpsPermisson()\r\n                        })\r\n\r\n            alert= dialogBuilder.create()\r\n            alert.show()\r\n        }\r\n        return true\r\n    }\r\n\r\n    fun gpsPermisson(){\r\n        val builder = android.app.AlertDialog.Builder(requireActivity())\r\n        val alertLayout = layoutInflater.inflate(R.layout.reject_dialog_layout, null)\r\n        val btnYes = alertLayout.findViewById<AppCompatButton>(R.id.btnYes)\r\n        val btnNo = alertLayout.findViewById<AppCompatButton>(R.id.btnNo)\r\n        val title = alertLayout.findViewById<AppCompatTextView>(R.id.reject_title)\r\n        title.setText(\r\n            Html.fromHtml(\r\n                \"In order to proceed,This app requires access to your Location. click\\n\" +\r\n                        \"    <b>OK</b>\\n\" +\r\n                        \"    to exit or click\\n\" +\r\n                        \"    <b>CANCEL</b>\\n\" +\r\n                        \"     to continue\"\r\n            )\r\n        )\r\n        builder.setView(alertLayout)\r\n        val alertDialog: android.app.AlertDialog? = builder.create()\r\n        alertDialog?.setCancelable(false)\r\n        val displayMetrics = DisplayMetrics()\r\n        activity?.windowManager?.defaultDisplay?.getMetrics(displayMetrics)\r\n        val width = displayMetrics.widthPixels\r\n        alertDialog?.show()\r\n        alertDialog?.window?.setBackgroundDrawableResource(android.R.color.transparent)\r\n        alertDialog?.window?.setLayout(\r\n            (width * 0.75).toInt(),\r\n            FrameLayout.LayoutParams.WRAP_CONTENT\r\n        )\r\n        btnYes.setOnClickListener {\r\n            alertDialog?.dismiss()\r\n            startActivity(Intent(requireActivity(), ThankYouActivity::class.java))\r\n            requireActivity().finish()\r\n        }\r\n        btnNo.setOnClickListener {\r\n            alertDialog?.dismiss()\r\n            alertMessageLocation()\r\n        }\r\n    }\r\n\r\n\r\n    fun requestLocationUpdates() {\r\n\r\n        isGpsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)\r\n\r\n        Log.d(TAG, \"http location requestLocationUpdates \")\r\n        locationViewModel = ViewModelProvider(this).get(LocationViewModel::class.java)\r\n        Log.d(TAG, \"http location requestLocationUpdates one \")\r\n        locationViewModel.getLocationLiveDate().observe(\r\n            requireActivity(),\r\n            androidx.lifecycle.Observer {\r\n                it.latitude\r\n                it.longitutde\r\n                Log.d(\r\n                    TAG,\r\n                    \"http location longitude:${it.longitutde} \" + \"latitude:${it.latitude}\"\r\n                )\r\n\r\n                var mLongitude = it.longitutde\r\n                var mLatitude = it.latitude\r\n\r\n                var locationStatus = LocationLatLan()\r\n                meetingParams?.longitude = it.longitutde\r\n                meetingParams?.latitude = it.latitude\r\n\r\n                var getSharedPreferences =\r\n                    requireActivity().applicationContext.getSharedPreferences(\r\n                        \"MyUser\",\r\n                        Context.MODE_PRIVATE\r\n                    )\r\n                var mailId = getSharedPreferences?.getString(\"MailId\", \"\").toString()\r\n                LocalStorage.email = mailId\r\n                locationStatus.gpsOn = true\r\n                locationStatus.customerInCall = false\r\n                locationStatus.emailId = LocalStorage.email\r\n                locationStatus.longitude = meetingParams?.longitude\r\n                locationStatus.latitude = meetingParams?.latitude\r\n                Log.d(\r\n                    TAG,\r\n                    \"http location requestLocationUpdates: ${locationStatus.emailId}....${locationStatus.longitude}..${locationStatus.latitude}\"\r\n                )\r\n\r\n\r\n                ApiCall.retrofitClient.geoLocation(locationStatus).enqueue(object :\r\n                    retrofit2.Callback<ResponseBody> {\r\n                    override fun onFailure(call: Call<ResponseBody>, t: Throwable) {\r\n                        Toast.makeText(\r\n                            requireActivity(),\r\n                            t.localizedMessage,\r\n                            Toast.LENGTH_SHORT\r\n                        )\r\n                            .show()\r\n                        Log.d(\r\n                            TAG,\r\n                            \"http location longitude:${it.longitutde} \" + \"latitude:${it.latitude} Failure method\"\r\n                        )\r\n                    }\r\n\r\n                    override fun onResponse(\r\n                        call: Call<ResponseBody>,\r\n                        response: Response<ResponseBody>\r\n                    ) {\r\n\r\n                        Log.d(\r\n                            TAG,\r\n                            \"http location longitude:${locationStatus.longitude} \" + \"latitude:${locationStatus.latitude}Success method\" + \" customerker:${meetingParams?.customerKeyNb}\"\r\n                        )\r\n                        if (response.isSuccessful) {\r\n                            Log.d(TAG, \"http location success ${locationStatus.customerInCall}\")\r\n                        }\r\n                    }\r\n\r\n                })\r\n\r\n            })\r\n        Log.d(TAG, \"location requestLocationUpdates end \")\r\n    }\r\n\r\n    fun denymessage(){\r\n        dialogBuilder = AlertDialog.Builder(requireActivity())\r\n        dialogBuilder\r\n                //.setTitle(\"\" )\r\n                .setMessage(Html.fromHtml(\"Its look like you have turned off the permissions required for this feature.It can be enable under Phone Settings>>Apps>>Los AmigosS>>Permission.\"))\r\n                // .setView(myview)\r\n                .setCancelable(false)\r\n                .setPositiveButton(\"Go to \\n Settings\", DialogInterface.OnClickListener { dialog, id\r\n                    ->\r\n                    var intent = Intent()\r\n                    intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)\r\n                    var uri = Uri.fromParts(\"package\", activity?.packageName, null)\r\n                    intent.setData(uri)\r\n                    context?.startActivity(intent)\r\n\r\n\r\n                })\r\n\r\n        alert= dialogBuilder.create()\r\n\r\n        if( ::alert.isInitialized&&!alert.isShowing) {\r\n            alert.show()\r\n        }\r\n\r\n    }\r\n\r\n    private fun loadWebview(url: String) {\r\n        var url1=\"\"\r\n        webView?.webViewClient = object : WebViewClient() {\r\n            override fun shouldOverrideUrlLoading(view: WebView?, url: String?): Boolean {\r\n                Log.d(\"URL\", url)\r\n\r\n                if ((url.toString().contains(AppConstant.DOCUSIGN_BASE_URL))||url.toString().contains(\r\n                        AppConstant.DOCUSIGN_BASE_URL1\r\n                    )) {\r\n\r\n                    updateDocumentSignStatus()\r\n\r\n                    webView?.visibility=View.GONE\r\n                    btn_join_disable.visibility = View.VISIBLE\r\n                    iv_join_disable.visibility = View.VISIBLE\r\n\r\n                    if(url.toString().contains(\"ttl_expired\"))\r\n                    {\r\n\r\n\r\n                        url1 = generateDocusignUrl().toString()\r\n                        Log.d(TAG, \"generate if  cal  URl ${url1}\")\r\n                        webView?.loadUrl(url1)\r\n\r\n                    }\r\n\r\n                } else {\r\n\r\n                    view?.loadUrl(url)\r\n                }\r\n\r\n                return true\r\n            }\r\n\r\n            override fun onPageStarted(view: WebView?, url: String?, favicon: Bitmap?) {\r\n                super.onPageStarted(view, url, favicon)\r\n            }\r\n\r\n            override fun onPageFinished(view: WebView?, url: String?) {\r\n                super.onPageFinished(view, url)\r\n                removeNotification()\r\n            }\r\n        }\r\n\r\n        webView?.loadUrl(url)\r\n\r\n        Log.d(\"URL\", url)\r\n    }\r\n\r\n    private fun updateDocumentSignStatus() {\r\n        val docuSignStatusRequest = DocuSignStatusRequest()\r\n        docuSignStatusRequest.callKeyNb = FirebaseNotification.callKeyNbForDocOffline\r\n        Log.d(TAG, \"offline updateDocumentSignStatus: ${docuSignStatusRequest.callKeyNb}\")\r\n        docuSignStatusRequest.action=\"COMPLETED\"\r\n        ApiCall.retrofitClient.updateDocuSignStatus(docuSignStatusRequest).enqueue(object :\r\n            retrofit2.Callback<ResponseBody> {\r\n            override fun onFailure(call: Call<ResponseBody>, t: Throwable) {\r\n\r\n            }\r\n\r\n            override fun onResponse(\r\n                call: Call<ResponseBody>,\r\n                response: Response<ResponseBody>\r\n            ) {\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun generateDocusignUrl():String?{\r\n        var url1=\"\"\r\n        var callkeyNB=meetingParams?.callKeyNb\r\n        ApiCall.retrofitClient.getDocuSignUrl(callkeyNB).enqueue(object :\r\n            retrofit2.Callback<Output> {\r\n            override fun onResponse(call: Call<Output>, response: Response<Output>) {\r\n                Log.d(TAG, \"generate on response cal  URl  \")\r\n                if (response.isSuccessful) {\r\n                    var status: Output? = response.body()\r\n                    url1 = status?.data?.statusMsg.toString()\r\n                    Log.d(\r\n                        \"TAG\",\r\n                        \"expired url success method called ${response.code()}\u200B\u200B${url1}\u200B\u200B\u200B\u200B\u200B\u200B\u200B\u200B \"\r\n                    )\r\n                }\r\n\r\n            }\r\n\r\n            override fun onFailure(call: Call<Output>, t: Throwable) {\r\n\r\n            }\r\n\r\n\r\n        })\r\n        return url1\r\n    }\r\n\r\n    private fun removeNotification() {\r\n        if (requireActivity().intent.hasExtra(AppConstant.NOTIFICATION_ID)) {\r\n            val notificationId = requireActivity().intent.getIntExtra(\r\n                AppConstant.NOTIFICATION_ID,\r\n                0\r\n            )\r\n            val manager = context?.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n            manager.cancel(notificationId)\r\n        }\r\n    }\r\n\r\n    fun dateTimeApiCall(){\r\n\r\n        var getSharedPreferencesOne = requireActivity().applicationContext.getSharedPreferences(\r\n            \"MyUser\",\r\n            Context.MODE_PRIVATE\r\n        )\r\n        var mailIdOne = getSharedPreferencesOne?.getString(\"MailId\", \"\")\r\n        ApiCall.retrofitClient.geoDateTime(mailIdOne).enqueue(object :\r\n            retrofit2.Callback<ResponseBody> {\r\n            override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {\r\n\r\n                if (response.isSuccessful) {\r\n\r\n                    var status: ResponseBody? = response.body()\r\n                    val adapter = Gson().getAdapter(Output::class.java)\r\n                    val successResponse = adapter.fromJson(status?.string())\r\n                    var time = successResponse.data.schdeuleTime\r\n                    var dateunix = successResponse.data.scheduleDate\r\n\r\n\r\n                    if (dateunix != null) {\r\n                        if (time != null) {\r\n                            dateTimeUpdate(dateunix, time)\r\n                        }\r\n                    }\r\n\r\n                }\r\n                hideProgress()\r\n            }\r\n\r\n\r\n\r\n            override fun onFailure(call: Call<ResponseBody>, t: Throwable) {\r\n\r\n            }\r\n\r\n\r\n        })\r\n    }\r\n\r\n    fun dateTimeUpdate(dateunix : String, time : String){\r\n\r\n        var unixSeconds = dateunix?.toLong()\r\n                ?.div(1000)\r\n        var convertDate = unixSeconds?.times(1000L)?.let { Date(it) }\r\n        var dateFormat = SimpleDateFormat(\"dd-MMM-yyyy\")\r\n        dateFormat.timeZone = TimeZone.getDefault()\r\n        var dateFinal = dateFormat.format(convertDate)\r\n//Local Date\r\n        var sdf = SimpleDateFormat(\"dd-MMM-yyyy\")\r\n        var localDate = sdf.format(Date())\r\n\r\n        if (dateFinal == localDate || dateFinal.isNullOrEmpty()) {\r\n            getViewModel()?.scheduleDate.value = \"Today\"\r\n            if (!time.isNullOrEmpty()) {\r\n                edit_time.visibility = View.VISIBLE\r\n            } else {\r\n                edit_time.visibility = View.GONE\r\n            }\r\n        } else {\r\n            getViewModel()?.scheduleDate.value = dateFinal\r\n            edit_time.visibility = View.VISIBLE\r\n        }\r\n        getViewModel().scheduledTime.value = time\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bpmlinks/vbank/ui/vehicleinspection/VehicleInspectionFragment.kt	(revision 6d8fdace4d929115bdbc218af5558e174f57ae99)
+++ app/src/main/java/com/bpmlinks/vbank/ui/vehicleinspection/VehicleInspectionFragment.kt	(date 1622616444739)
@@ -841,12 +841,12 @@
                     var time = successResponse.data.schdeuleTime
                     var dateunix = successResponse.data.scheduleDate
 
-
-                    if (dateunix != null) {
-                        if (time != null) {
-                            dateTimeUpdate(dateunix, time)
-                        }
-                    }
+//
+//                    if (dateunix != null) {
+//                        if (time != null) {
+//                            dateTimeUpdate(dateunix, time)
+//                        }
+//                    }
 
                 }
                 hideProgress()
